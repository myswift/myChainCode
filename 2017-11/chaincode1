package main
//借贷信息保存合约demo 实现存储用户借贷信息和查询借贷信息两个功能
import (
   "github.com/hyperledger/fabric/core/chaincode/shim"
   pb "github.com/hyperledger/fabric/protos/peer"
   "fmt"
)

type LoinChaincode struct {
}

func main() {
   err := shim.Start(new(LoinChaincode))
   if err != nil {
      fmt.Printf("Error starting Loin chaincode: %s", err)
   }
}
func (t *LoinChaincode) Init(stub shim.ChaincodeStubInterface) pb.Response {
   return shim.Success(nil)
}


func (t *LoinChaincode) Invoke(stub shim.ChaincodeStubInterface) pb.Response {
   function, args := stub.GetFunctionAndParameters()
   fmt.Println("invoke is running " + function)
   if function == "query" {//查询函数
      return t.query(stub, args)//定义调用的函数
   }
    if function == "invoke" {//插入信息函数
      return t.invoke(stub, args)//定义调用的函数
   }
   return shim.Error("Received unknown function invocation")
}
func (t *LoinChaincode) invoke(stub shim.ChaincodeStubInterface, args []string) pb.Response {
   return shim.Success([]byte("Called test1"))
}
// query callback representing the query of a chaincode
func (t *SimpleChaincode) query(stub shim.ChaincodeStubInterface, args []string) pb.Response {
	var A string // Entities
	var err error

	if len(args) != 1 {
		return shim.Error("Incorrect number of arguments. Expecting name of the person to query")
	}

	A = args[0]

	// Get the state from the ledger
	Avalbytes, err := stub.GetState(A)
	if err != nil {
		jsonResp := "{\"Error\":\"Failed to get state for " + A + "\"}"
		return shim.Error(jsonResp)
	}

	if Avalbytes == nil {
		jsonResp := "{\"Error\":\"Nil amount for " + A + "\"}"
		return shim.Error(jsonResp)
	}

	jsonResp := "{\"Name\":\"" + A + "\",\"Amount\":\"" + string(Avalbytes) + "\"}"
	fmt.Printf("Query Response:%s\n", jsonResp)
	return shim.Success(Avalbytes)
}
