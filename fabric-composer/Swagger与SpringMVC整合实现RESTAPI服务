一，依赖管理
在整合之前，需要把所有使用到的依赖包全部引入
<!-- swagger-springmvc -->
    <dependency>
        <groupId>com.mangofactory</groupId>
        <artifactId>swagger-springmvc</artifactId>
        <version>1.0.2</version>
    </dependency>
    <dependency>
        <groupId>com.mangofactory</groupId>
        <artifactId>swagger-models</artifactId>
        <version>1.0.2</version>
    </dependency>
    <dependency>
        <groupId>com.wordnik</groupId>
        <artifactId>swagger-annotations</artifactId>
        <version>1.3.11</version>
    </dependency>
    <!-- swagger-springmvc dependencies -->
    <dependency>
        <groupId>com.google.guava</groupId>
        <artifactId>guava</artifactId>
        <version>15.0</version>
    </dependency>
    <dependency>
        <groupId>com.fasterxml.jackson.core</groupId>
        <artifactId>jackson-annotations</artifactId>
        <version>2.4.4</version>
    </dependency>
    <dependency>
        <groupId>com.fasterxml.jackson.core</groupId>
        <artifactId>jackson-databind</artifactId>
        <version>2.4.4</version>
    </dependency>
    <dependency>
        <groupId>com.fasterxml.jackson.core</groupId>
        <artifactId>jackson-core</artifactId>
        <version>2.4.4</version>
    </dependency>
    <dependency>
        <groupId>com.fasterxml</groupId>
        <artifactId>classmate</artifactId>
        <version>1.1.0</version>
    </dependency>
    
    二、Swagger配置
    Swagger的配置实际上就是自定义一个Config类，通过java编码的方式实现配置。代码如下：

import com.mangofactory.swagger.configuration.SpringSwaggerConfig;
import com.mangofactory.swagger.models.dto.ApiInfo;
import com.mangofactory.swagger.plugin.EnableSwagger;
import com.mangofactory.swagger.plugin.SwaggerSpringMvcPlugin;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;

/**
 * 
 */
@Configuration
@EnableSwagger
@EnableWebMvc
public class SwaggerConfig {

    private SpringSwaggerConfig springSwaggerConfig;

    /**
     * Required to autowire SpringSwaggerConfig
     */
    @Autowired
    public void setSpringSwaggerConfig(SpringSwaggerConfig springSwaggerConfig)
    {
        this.springSwaggerConfig = springSwaggerConfig;
    }

    /**
     * Every SwaggerSpringMvcPlugin bean is picked up by the swagger-mvc
     * framework - allowing for multiple swagger groups i.e. same code base
     * multiple swagger resource listings.
     */
    @Bean
    public SwaggerSpringMvcPlugin customImplementation()
    {
        return new SwaggerSpringMvcPlugin(this.springSwaggerConfig)
                .apiInfo(apiInfo())
                .includePatterns(".*?");
    }

    private ApiInfo apiInfo()
    {
        ApiInfo apiInfo = new ApiInfo(
                "My Apps API Title",
                "My Apps API Description",
                "My Apps API terms of service",
                "My Apps API Contact Email",
                "My Apps API Licence Type",
                "My Apps API License URL");
        return apiInfo;
    }
}

将swagger配置类及依赖SpringSwaggerConfig加载到spring容器中：
<!-- 启用MVC注解 -->  
<mvc:annotation-driven />  
<!-- 将 springSwaggerConfig加载到spring容器 -->  
<bean class="com.mangofactory.swagger.configuration.SpringSwaggerConfig" />  
<!-- 将自定义的swagger配置类加载到spring容器 -->  
<bean class="com.yrok.swagger.SwaggerConfig" /> 

配置相关controller的api：
package com.crc.controller;  
  
import javax.annotation.Resource;  
  
import org.springframework.stereotype.Controller;  
import org.springframework.web.bind.annotation.RequestMapping;  
import org.springframework.web.bind.annotation.RequestParam;  
import org.springframework.web.bind.annotation.ResponseBody;  
  
import com.wordnik.swagger.annotations.Api;  
import com.wordnik.swagger.annotations.ApiOperation;  
import com.wordnik.swagger.annotations.ApiParam;  
import com.yrok.entity.User;  
import com.yrok.service.UserService;  
@Api(value="user")  
@Controller  
@RequestMapping(value="/user")  
public class UserController {  
  
    @Resource  
    UserService userService;  
  
    @RequestMapping(value = "/getUser")  
    @ResponseBody  
    @ApiOperation(value="根据ID获取用户信息",httpMethod="GET",notes="get user by id",response=User.class)  
    public User getUser(@ApiParam(required=true,value="用户ID",name="userId")@RequestParam(value="userId")Integer userId) {  
        return userService.getUserByID(userId);  
    }  
      
}

和Swagger UI的集成：
在GitHub上将swaggerui下载，地址:https://github.com/swagger-api/swagger-ui
解压后将dist文件夹中所有的文件拷贝到webapp/swagger这里的swagger是作者自定义的你可以写为自己创建的目录。
修改index.html中的 http://petstore.swagger.wordnik.com/v2/swagger.json修改为自己项目路径+api-docs,例如：
http://localhost:8080/SSMSwagger/api-docs：SSMSwagger为项目名称。
在spring-mvc.xml中过滤掉swagger-ui的文件：

<!-- 静态资源文件，不会被Spring MVC拦截 -->  
<mvc:resources mapping="/swagger/**" location="/swagger/" />  
到这里基本完成了springmvc和swagger的整合，下面是测试结果：
在浏览器中访问:http://localhost:8080/SSMSwagger/swagger/index.html#/user/getUser
